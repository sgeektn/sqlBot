https://www.cardratings.com/hqx/min/?b=js&g=mobile-ppc-page-js&v=1003
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.3.5.151#dev}
|_ -| . [,]     | .'| . |
|___|_  [.]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 22:20:02 /2019-05-30/

[?1049h[22;0;0t[1;24r(B[m[4l[?7h[24;1H[?1049l[23;0;0t[?1l>[22:20:03] [INFO] testing connection to the target URL
[22:20:06] [INFO] checking if the target is protected by some kind of WAF/IPS
[22:20:07] [CRITICAL] heuristics detected that the target is protected by some kind of WAF/IPS
are you sure that you want to continue with further target testing? [Y/n] Y
[22:20:07] [WARNING] please consider usage of tamper scripts (option '--tamper')
[22:20:07] [INFO] testing if the target URL content is stable
[22:20:09] [INFO] target URL content is stable
[22:20:09] [INFO] testing if GET parameter 'b' is dynamic
[22:20:10] [WARNING] GET parameter 'b' does not appear to be dynamic
[22:20:10] [WARNING] heuristic (basic) test shows that GET parameter 'b' might not be injectable
[22:20:10] [INFO] testing for SQL injection on GET parameter 'b'
[22:20:10] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:20:38] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[22:20:56] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[22:21:29] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:21:48] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:21:58] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[22:22:02] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (comment)'
[22:22:05] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - comment)'
[22:22:09] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[22:22:19] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[22:22:27] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)'
[22:22:37] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[22:22:48] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[22:22:56] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[22:23:14] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[22:23:33] [INFO] testing 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[22:23:48] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[22:24:17] [INFO] testing 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[22:24:32] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)'
[22:24:55] [INFO] testing 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)'
[22:25:09] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[22:25:30] [INFO] testing 'PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)'
[22:25:44] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[22:26:02] [INFO] testing 'Oracle OR boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[22:26:16] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[22:26:17] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET)'
[22:26:18] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)'
[22:26:18] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT)'
[22:26:19] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT - original value)'
[22:26:19] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int)'
[22:26:20] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int - original value)'
[22:26:20] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace'
[22:26:21] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (original value)'
[22:26:21] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)'
[22:26:22] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)'
[22:26:22] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace'
[22:26:23] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)'
[22:26:23] [INFO] testing 'Oracle boolean-based blind - Parameter replace'
[22:26:24] [INFO] testing 'Oracle boolean-based blind - Parameter replace (original value)'
[22:26:25] [INFO] testing 'Informix boolean-based blind - Parameter replace'
[22:26:25] [INFO] testing 'Informix boolean-based blind - Parameter replace (original value)'
[22:26:26] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace'
[22:26:26] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'
[22:26:27] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[22:26:27] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[22:26:28] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[22:26:28] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[22:26:29] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[22:26:30] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[22:26:31] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[22:26:31] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[22:26:31] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause'
[22:26:32] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (original value)'
[22:26:33] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)'
[22:26:34] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause'
[22:26:35] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)'
[22:26:36] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause'
[22:26:37] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[22:26:38] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause'
[22:26:39] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[22:26:40] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause'
[22:26:41] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[22:26:42] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[22:27:01] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Stacked queries'
[22:27:14] [INFO] testing 'MySQL < 5.0 boolean-based blind - Stacked queries'
[22:27:14] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries'
[22:27:27] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)'
[22:27:40] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)'
[22:27:57] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries'
[22:28:21] [INFO] testing 'Oracle boolean-based blind - Stacked queries'
[22:28:35] [INFO] testing 'Microsoft Access boolean-based blind - Stacked queries'
[22:28:48] [INFO] testing 'SAP MaxDB boolean-based blind - Stacked queries'
[22:29:01] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[22:29:14] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[22:29:25] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[22:29:36] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[22:29:47] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[22:29:59] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[22:30:10] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[22:30:23] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[22:30:35] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[22:30:49] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[22:31:01] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[22:31:12] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[22:31:26] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[22:31:40] [INFO] testing 'MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)'
[22:31:52] [INFO] testing 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)'
[22:31:57] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[22:32:09] [INFO] testing 'PostgreSQL OR error-based - WHERE or HAVING clause'
[22:32:17] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[22:32:30] [INFO] testing 'Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (IN)'
[22:32:39] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)'
[22:32:50] [INFO] testing 'Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (CONVERT)'
[22:32:59] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)'
[22:33:09] [INFO] testing 'Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (CONCAT)'
[22:33:18] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[22:33:29] [INFO] testing 'Oracle OR error-based - WHERE or HAVING clause (XMLType)'
[22:33:46] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[22:33:56] [INFO] testing 'Oracle OR error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[22:34:05] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[22:34:15] [INFO] testing 'Oracle OR error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[22:34:24] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)'
[22:34:34] [INFO] testing 'Oracle OR error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)'
[22:34:43] [INFO] testing 'Firebird AND error-based - WHERE or HAVING clause'
[22:34:53] [INFO] testing 'Firebird OR error-based - WHERE or HAVING clause'
[22:35:02] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[22:35:10] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[22:35:10] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[22:35:10] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[22:35:10] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[22:35:10] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[22:35:11] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[22:35:11] [INFO] testing 'PostgreSQL error-based - Parameter replace'
[22:35:11] [INFO] testing 'PostgreSQL error-based - Parameter replace (GENERATE_SERIES)'
[22:35:11] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace'
[22:35:11] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)'
[22:35:12] [INFO] testing 'Oracle error-based - Parameter replace'
[22:35:12] [INFO] testing 'Firebird error-based - Parameter replace'
[22:35:12] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED)'
[22:35:13] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP)'
[22:35:13] [INFO] testing 'MySQL >= 5.7.8 error-based - ORDER BY, GROUP BY clause (JSON_KEYS)'
[22:35:13] [INFO] testing 'MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[22:35:14] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE)'
[22:35:14] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML)'
[22:35:15] [INFO] testing 'MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[22:35:15] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause'
[22:35:16] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES)'
[22:35:16] [INFO] testing 'Microsoft SQL Server/Sybase error-based - ORDER BY clause'
[22:35:16] [INFO] testing 'Oracle error-based - ORDER BY, GROUP BY clause'
[22:35:17] [INFO] testing 'Firebird error-based - ORDER BY clause'
[22:35:17] [INFO] testing 'MySQL inline queries'
[22:35:18] [INFO] testing 'PostgreSQL inline queries'
[22:35:18] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[22:35:18] [INFO] testing 'Oracle inline queries'
[22:35:18] [INFO] testing 'SQLite inline queries'
[22:35:18] [INFO] testing 'Firebird inline queries'
[22:35:18] [INFO] testing 'MySQL > 5.0.11 stacked queries (comment)'
[22:35:25] [INFO] testing 'MySQL > 5.0.11 stacked queries'
[22:35:33] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP - comment)'
[22:35:39] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP)'
[22:35:47] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[22:35:52] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[22:36:00] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[22:36:06] [INFO] testing 'PostgreSQL > 8.1 stacked queries'
[22:36:14] [INFO] testing 'PostgreSQL stacked queries (heavy query - comment)'
[22:36:19] [INFO] testing 'PostgreSQL stacked queries (heavy query)'
[22:36:28] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc - comment)'
[22:36:33] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc)'
[22:36:41] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[22:36:46] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'
[22:36:55] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[22:37:00] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)'
[22:37:09] [INFO] testing 'Oracle stacked queries (heavy query - comment)'
[22:37:15] [INFO] testing 'Oracle stacked queries (heavy query)'
[22:37:25] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP - comment)'
[22:37:30] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP)'
[22:37:39] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP - comment)'
[22:37:39] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP)'
[22:37:39] [INFO] testing 'IBM DB2 stacked queries (heavy query - comment)'
[22:37:44] [INFO] testing 'IBM DB2 stacked queries (heavy query)'
[22:37:52] [INFO] testing 'SQLite > 2.0 stacked queries (heavy query - comment)'
[22:37:57] [INFO] testing 'SQLite > 2.0 stacked queries (heavy query)'
[22:38:06] [INFO] testing 'Firebird stacked queries (heavy query - comment)'
[22:38:11] [INFO] testing 'Firebird stacked queries (heavy query)'
[22:38:20] [INFO] testing 'SAP MaxDB stacked queries (heavy query - comment)'
[22:38:25] [INFO] testing 'SAP MaxDB stacked queries (heavy query)'
[22:38:34] [INFO] testing 'HSQLDB >= 1.7.2 stacked queries (heavy query - comment)'
[22:38:41] [INFO] testing 'HSQLDB >= 1.7.2 stacked queries (heavy query)'
[22:38:50] [INFO] testing 'HSQLDB >= 2.0 stacked queries (heavy query - comment)'
[22:38:56] [INFO] testing 'HSQLDB >= 2.0 stacked queries (heavy query)'
[22:39:04] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[22:39:16] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (query SLEEP)'
[22:39:27] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP)'
[22:39:39] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (SLEEP)'
[22:39:44] [INFO] GET parameter 'b' appears to be 'MySQL >= 5.0.12 OR time-based blind (SLEEP)' injectable 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
[22:39:44] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[22:39:44] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[22:39:53] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[22:39:58] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[22:40:04] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[22:40:10] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[22:40:15] [INFO] testing 'Generic UNION query (random number) - 41 to 60 columns'
[22:40:21] [INFO] testing 'Generic UNION query (NULL) - 61 to 80 columns'
[22:40:26] [INFO] testing 'Generic UNION query (random number) - 61 to 80 columns'
[22:40:32] [INFO] testing 'Generic UNION query (NULL) - 81 to 100 columns'
[22:40:38] [INFO] testing 'Generic UNION query (random number) - 81 to 100 columns'
[22:40:43] [INFO] checking if the injection point on GET parameter 'b' is a false positive
[22:40:43] [WARNING] false positive or unexploitable injection point detected
[22:40:43] [WARNING] GET parameter 'b' does not seem to be injectable
[22:40:43] [INFO] testing if GET parameter 'g' is dynamic
[22:40:43] [WARNING] GET parameter 'g' does not appear to be dynamic
[22:40:43] [WARNING] heuristic (basic) test shows that GET parameter 'g' might not be injectable
[22:40:44] [INFO] testing for SQL injection on GET parameter 'g'
[22:40:44] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:41:21] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[22:41:39] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[22:42:03] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:42:22] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:42:33] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[22:42:37] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (comment)'
[22:42:41] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - comment)'
[22:42:46] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[22:42:46] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[22:42:46] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[22:42:47] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[22:42:47] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[22:42:48] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[22:43:06] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[22:43:16] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[22:43:26] [WARNING] GET parameter 'g' does not seem to be injectable
[22:43:26] [INFO] testing if GET parameter 'v' is dynamic
[22:43:26] [WARNING] GET parameter 'v' does not appear to be dynamic
[22:43:26] [WARNING] heuristic (basic) test shows that GET parameter 'v' might not be injectable
[22:43:26] [INFO] testing for SQL injection on GET parameter 'v'
[22:43:26] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:43:52] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[22:44:10] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[22:44:34] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:44:53] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:45:03] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[22:45:07] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (comment)'
[22:45:10] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - comment)'
[22:45:14] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[22:45:15] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[22:45:15] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[22:45:15] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[22:45:16] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[22:45:16] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[22:45:34] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[22:45:50] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[22:46:00] [WARNING] GET parameter 'v' does not seem to be injectable
[22:46:00] [INFO] testing if parameter 'Host' is dynamic
[22:46:00] [INFO] heuristics detected web page charset 'ascii'
[22:46:00] [WARNING] parameter 'Host' does not appear to be dynamic
[22:46:00] [WARNING] heuristic (basic) test shows that parameter 'Host' might not be injectable
[22:46:00] [INFO] testing for SQL injection on parameter 'Host'
[22:46:00] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:46:06] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[22:46:07] [INFO] parameter 'Host' appears to be 'OR boolean-based blind - WHERE or HAVING clause' injectable (with --string="Reference #9.8fd06bd1.1559256367.5d2292")
[22:46:07] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[22:46:07] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[22:46:07] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[22:46:09] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[22:46:11] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[22:46:12] [INFO] testing 'Generic UNION query (random number) - 41 to 60 columns'
[22:46:13] [INFO] testing 'Generic UNION query (NULL) - 61 to 80 columns'
[22:46:14] [INFO] testing 'Generic UNION query (random number) - 61 to 80 columns'
[22:46:15] [INFO] testing 'Generic UNION query (NULL) - 81 to 100 columns'
[22:46:16] [INFO] testing 'Generic UNION query (random number) - 81 to 100 columns'
[22:46:18] [WARNING] in OR boolean-based injection cases, please consider usage of switch '--drop-set-cookie' if you experience any problems during data retrieval
[22:46:18] [INFO] checking if the injection point on Host parameter 'Host' is a false positive
[22:46:18] [WARNING] false positive or unexploitable injection point detected
[22:46:18] [WARNING] parameter 'Host' does not seem to be injectable
[22:46:18] [INFO] testing if parameter 'User-Agent' is dynamic
[22:46:18] [INFO] parameter 'User-Agent' appears to be dynamic
[22:46:19] [WARNING] heuristic (basic) test shows that parameter 'User-Agent' might not be injectable
[22:46:21] [INFO] testing for SQL injection on parameter 'User-Agent'
[22:46:21] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:47:09] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[22:47:22] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[22:48:12] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:48:46] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:48:53] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[22:49:00] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (comment)'
[22:49:03] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - comment)'
[22:49:11] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[22:49:11] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[22:49:12] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[22:49:13] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[22:49:14] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[22:49:15] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[22:49:47] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[22:49:56] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[22:50:02] [WARNING] parameter 'User-Agent' does not seem to be injectable
[22:50:02] [INFO] testing if parameter 'Referer' is dynamic
[22:50:02] [INFO] parameter 'Referer' appears to be dynamic
[22:50:02] [WARNING] heuristic (basic) test shows that parameter 'Referer' might not be injectable
[22:50:05] [INFO] testing for SQL injection on parameter 'Referer'
[22:50:05] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:50:55] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[22:51:06] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[22:51:49] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:52:25] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:52:30] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[22:52:38] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (comment)'
[22:52:40] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - comment)'
[22:52:47] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[22:52:48] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[22:52:49] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[22:52:49] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[22:52:50] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[22:52:51] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[22:53:23] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[22:53:32] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[22:53:35] [WARNING] parameter 'Referer' does not seem to be injectable
[22:53:35] [CRITICAL] all tested parameters do not appear to be injectable. Also, you can try to rerun by providing a valid value for option '--string' as perhaps the string you have chosen does not match exclusively True responses. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent'
[22:53:35] [WARNING] HTTP error codes detected during run:
400 (Bad Request) - 298 times, 403 (Forbidden) - 6203 times

[*] ending @ 22:53:35 /2019-05-30/

